
import static java.lang.Math.random;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


public class MemoriaVirtual extends javax.swing.JFrame {

    public MemoriaVirtual() {
        initComponents();
        setResizable(false);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        memoriaRAM.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        memoriaRAM.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        createArray(1);
        createArray(2);
        createArray(3);
        createArray(4);
        createArray(5);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tamanoProceso = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        memoriaRAM = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        memoriaSSD = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        botonCrearProceso = new javax.swing.JButton();
        botonEjecutarProceso = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        modelo = new DefaultListModel();
        listProcesos = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tamanoProceso.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        tamanoProceso.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(16), Integer.valueOf(1)));
        tamanoProceso.setToolTipText("");
        tamanoProceso.setValue(1);
        getContentPane().add(tamanoProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, 60, 40));

        memoriaRAM.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        memoriaRAM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", ""},
                {"2", ""},
                {"3", ""},
                {"4", ""},
                {"5", ""},
                {"6", ""},
                {"7", ""},
                {"8", ""},
                {"9", ""},
                {"10", ""},
                {"11", ""},
                {"12", ""},
                {"13", ""},
                {"14", ""},
                {"15", ""},
                {"16", ""}
            },
            new String [] {
                "Espacio", "Procesos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(memoriaRAM);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 120, 190, 290));

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel4.setText("Memoria RAM");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 70, -1, -1));

        jScrollPane3.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N

        memoriaSSD.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        memoriaSSD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Procesos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(memoriaSSD);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 110, 170, 520));

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel5.setText("SSD");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 70, -1, -1));

        botonCrearProceso.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        botonCrearProceso.setText("Crear Proceso");
        botonCrearProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCrearProcesoActionPerformed(evt);
            }
        });
        getContentPane().add(botonCrearProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 90, -1, -1));

        botonEjecutarProceso.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        botonEjecutarProceso.setText("Ejecutar Proceso");
        botonEjecutarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEjecutarProcesoActionPerformed(evt);
            }
        });
        getContentPane().add(botonEjecutarProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 90, -1, 30));

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 0, 30)); // NOI18N
        jLabel6.setText("Simulador Memoria Virtual");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 32, -1, -1));

        output.setEditable(false);
        output.setBackground(new java.awt.Color(0, 0, 0));
        output.setColumns(20);
        output.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        output.setForeground(new java.awt.Color(0, 255, 51));
        output.setRows(5);
        jScrollPane2.setViewportView(output);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 440, 470, 188));

        listProcesos.setModel(modelo);
        listProcesos.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jScrollPane5.setViewportView(listProcesos);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 390, 210));

        jLabel7.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel7.setText("Output");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkg-blu.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-60, -10, 1180, 670));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCrearProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCrearProcesoActionPerformed
        if ((espacioSSD + (int)tamanoProceso.getValue()) <= 100) {
            String proceso = abecedario.get(cantidadProcesos) + "    "+tamanoProceso.getValue().toString();
            modelo.add(cantidadProcesos++, proceso);
            llenarSSD((int)(tamanoProceso.getValue()),modelo.get(cantidadProcesos-1).toString());
        }
        else{
            JOptionPane.showMessageDialog(null,"Espacio insuficiente en el SSD");
        }
    }//GEN-LAST:event_botonCrearProcesoActionPerformed

    private void botonEjecutarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEjecutarProcesoActionPerformed
        String procesoRun = listProcesos.getSelectedValue().toString();
        if(buscarRAM(procesoRun)){
            hitOutput(procesoRun.substring(0, 2));
        }
        else{
            int tamano = Integer.parseInt(procesoRun.substring(6));
            quitarProcesoSSD(procesoRun);
            llenarRAM(tamano,procesoRun);
            missOutput(procesoRun.substring(0, 2));
        }
    }//GEN-LAST:event_botonEjecutarProcesoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MemoriaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MemoriaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MemoriaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MemoriaVirtual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MemoriaVirtual().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCrearProceso;
    private javax.swing.JButton botonEjecutarProceso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList listProcesos;
    private DefaultListModel modelo;
    private javax.swing.JTable memoriaRAM;
    private javax.swing.JTable memoriaSSD;
    private javax.swing.JTextArea output;
    private javax.swing.JSpinner tamanoProceso;
    // End of variables declaration//GEN-END:variables
    ArrayList abecedario=new ArrayList();
    int cantidadProcesos = 0;
    int espacioSSD = 0;
    int espacioRAM = 0;
    boolean llenaRAM = false;
    
    public ArrayList createArray (int veces){
        for ( int i=0; i<26; i++) {
            char letra = (char) ('A' +i);
            abecedario.add(letra+""+veces); 
        }
        return abecedario;
    }
    
    public void llenarSSD(int tamanoProceso, String proceso){
        for (int i=0;i<tamanoProceso;i++){
            memoriaSSD.setValueAt(proceso, espacioSSD++, 0);
        }
    }
    
    public void llenarRAM(int tamanoProceso, String proceso){
        if (espacioRAM >= 16){
            espacioRAM = 0;
            llenaRAM = true;            
        }
        if(llenaRAM){
            toSSD(tamanoProceso);
        }
        if (17-espacioRAM<tamanoProceso){
            espacioRAM = 0;
            llenaRAM = true;
            llenarRAM(tamanoProceso,proceso);
        }
        else{
            for (int i=0;i<tamanoProceso;i++){
                memoriaRAM.setValueAt(proceso, espacioRAM++, 1);
            }
        }
        
    }
    
    private void toSSD(int tamanoProceso){
        int temEspacioRAM = espacioRAM;
        ArrayList procesosToSSD = new ArrayList();
        for (int i=0; i < tamanoProceso; i++){
            if (temEspacioRAM + i < 16){
                if (!memoriaRAM.getValueAt(temEspacioRAM + i, 1).toString().equals("")){
                    procesosToSSD.add(memoriaRAM.getValueAt(temEspacioRAM + i, 1));
                    i += Integer.parseInt(memoriaRAM.getValueAt(temEspacioRAM + i, 1).toString().substring(6))-1;
                }
            }
        }
        for (int i = 0; i<procesosToSSD.size(); i++){
            int tamano = Integer.parseInt(procesosToSSD.get(i).toString().substring(6));            
            llenarSSD(tamano,procesosToSSD.get(i).toString());
            temEspacioRAM = buscarPosicionRAM(procesosToSSD.get(i).toString());
            for (int a = 0; a < tamano;a++){
                    memoriaRAM.setValueAt("",temEspacioRAM+ a, 1);
            }
        }
    }
    
    private void missOutput(String procesoRun) {
        output.append("MISS: "+procesoRun + " encontrado en ---> SSD\n");
    }
    
    private void hitOutput(String procesoRun) {
        output.append("HIT: "+procesoRun + " encontrado en ---> RAM\n");
    }

    private boolean buscarRAM(String procesoRun) {
        for (int i =0 ; i < espacioRAM; i++){
            if (procesoRun.equals(memoriaRAM.getValueAt(i, 1).toString())){
                return true;
            }
        }
        return false;
    }
    
    private int buscarPosicionRAM(String procesoRun) {
        for (int i =0 ; i < 16; i++){
            if (procesoRun.equals(memoriaRAM.getValueAt(i, 1).toString())){
                return i;
            }
        }
        return 0;
    }
    
    private void quitarProcesoSSD(String procesoRun){
        for (int i=0; i< espacioSSD; i++){
            if (memoriaSSD.getValueAt(i, 0).toString().equals(procesoRun)){
                memoriaSSD.setValueAt("", i, 0);
            }
        }
    }

}